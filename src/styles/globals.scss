@use "sass:math";

// Подключение миксинов ===========================================================================================================================================================================================================================================================================
@mixin font($font_name, $file_name, $weight, $style) {
	@font-face {
		font-family: $font_name;
		font-display: swap;
		src: url("../fonts/#{$file_name}.woff2") format("woff2"),
		url("../fonts/#{$file_name}.woff") format("woff");
		font-weight: #{$weight};
		font-style: #{$style};
	}
}



@import url("https://fonts.googleapis.com/css?family=Roboto:100,100italic,300,300italic,regular,italic,500,500italic,700,700italic,900,900italic&display=swap");
// Подключение шрифтов ===========================================================================================================================================================================================================================================================================
//&display=swap - добавить при подключении через плагин

// Подключить если есть локальные файлы шрифтов
//@import "fonts/fonts";

// Подключение иконочных шрифтов ==============================================================================================================================================================================================================================================================================
// Подключить если есть файл иконочного шрифта
//@import "fonts/icons";

// ============================================================================================================================================================================================================================================================================================================================================================================================
// Настройки шаблона ============================================================================================================================================================================================================================================================================================================================================================================================
// ============================================================================================================================================================================================================================================================================================================================================================================================
//Подключение шрифта


//Percent
@function percent($px, $from) {
	$result: math.div($px, $from) * 100%;
	@return $result;
}

//REM
@function rem($px) {
	$result: math.div($px, 16)+rem;
	@return $result;
}

//EM
@function em($px, $current: 16) {
	$result: math.div($px, $current)+em;
	@return $result;
}

//Адаптивное свойство

//Currency
@mixin currency($sym) {
	&::after {
		content: "#{$sym}";
	}
}

// Grids
@mixin gridCards($type: fit, $min: 280px, $max: 1fr, $gap: 30px) {
	display: grid;
	gap: $gap;
	grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
}

// Адаптивное свойство (clamp)
@mixin adaptiveValue($property, $startSize, $minSize, $widthFrom: $containerWidth, $widthTo: $minWidth, $keepSize: 0) {
	@if ($startSize==0) {
		$startSize: 0.000001;
	}

	@if ($minSize==0) {
		$minSize: 0.000001;
	}

	// Для calc();
	$addSize: math.div($startSize - $minSize, 16);

	@if ($widthFrom ==$containerWidth and $maxWidthContainer ==0) {
		$widthFrom: $maxWidth;
	}

	// Брейк-поинты в EM
	$widthFromMedia: em($widthFrom);
	$widthToMedia: em($widthTo);

	// Формула плавающего значения
	// Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
	$slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
	$yIntersection: -$widthTo * $slope + $minSize;

	@if ($yIntersection==0) {
		$yIntersection: 0.000001;
	}

	$flyValue: #{rem($yIntersection)}" + "#{$slope * 100}vw;

	// Получение значения свойства
	$propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};

	// Если отрицательные значения
	@if ($minSize > $startSize) {
		$propertyValue: #{"clamp(" rem($startSize) "," $flyValue "," rem($minSize) ")"};
	}

	// Если поддерживается clamp();
	@supports (#{$property}: $propertyValue) {
		#{$property}: $propertyValue;
	}

	// Если не поддерживается clamp();
	@supports not (#{$property}: $propertyValue) {
		#{$property}: calc(#{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div($widthFrom, 16) - math.div($widthTo, 16)});
	}

	// Устанавливаем значения по умолчанию
	@if $widthFrom !=$containerWidth and $widthFrom !=$maxWidth and $keepSize !=1 and $keepSize !=2 {
		@media (min-width: $widthFromMedia) {
			#{$property}: inherit;
		}
	}

	@if $widthTo !=$minWidth and $keepSize !=1 and $keepSize !=3 {
		@media (max-width: $widthToMedia) {
			#{$property}: inherit;
		}
	}
}




// Шрифт по умолчанию ==============================================================================================================================================================================================================================================================================
$fontFamily: "Roboto";
$fontSize: rem(14); // где 14(px) - размер шрифта по умолчанию из макета

// Основные цвета
$mainColor: #000000; // Цвет шрифта по умолчанию

// Настройки адаптивной сетки ===============================================================================================================================================================================================================================================================================================

// Минимальная ширина страницы
$minWidth: 320;
// Ширина полотна (макета)
$maxWidth: 1920;
// Ширина ограничивающего контейнера (0 = нет ограничения)
$maxWidthContainer: 1380;
// Общий отступ у контейнера
// (30 = по 15px слева и справа, 0 = нет отступа)
$containerPadding: 30;

// Ширина срабатывания первого брейкпоинта
$containerWidth: $maxWidthContainer + $containerPadding;

// Брейк-поинты
$pc: em($containerWidth); // ПК, ноутбуки, некоторые планшеты в горизонтальном положении
$tablet: em(991.98); // Планшеты, некоторые телефоны в горизонтальном положении
$mobile: em(767.98); // Телефоны L
$mobileSmall: em(479.98); // Телефоны S

// Тип адаптива:
// 1 = отзывчивость (у контейнера нет брейкпоинтов),
// 2 = по брейк-поинтам (контейнер меняет свою ширину по брейк-поинтам)
$responsiveType: 1;

// ============================================================================================================================================================================================================================================================================================================================================================================================
// ============================================================================================================================================================================================================================================================================================================================================================================================

// Обнуление ============================================================================================================================================================================================== =============================================================================================== ===============================================================================================


// Стили тега BODY ============================================================================================================================================================================================================================================================================================================================================================================================

body {


	// Скролл заблокирован
	.lock & {
		overflow: hidden;
		touch-action: none;
		overscroll-behavior: none;
	}

	// Сайт загружен
	.loaded & {}
}

// Оболочка wrapper ============================================================================================================================================================================================================================================================================================================================================================================================================================================


// Ограничивающий контейнер ======================================================================================================================================================================================================================
@if ($responsiveType==1) {

	// Отзывчивая
	[class*="__container"] {
		@if ($maxWidthContainer>0) {
			max-width: rem($maxWidthContainer);
			box-sizing: content-box;
			margin: 0 auto;
		}

		@if ($containerPadding>0) {
			padding: 0 rem(math.div($containerPadding, 2));
		}
	}
}

@else {

	// По брейк-поинтам
	[class*="__container"] {
		margin: 0 auto;

		@if ($maxWidthContainer>0) {
			max-width: rem($maxWidthContainer);
			box-sizing: content-box;
		}

		@else {
			@if ($containerPadding>0) {
				padding: 0 rem(math.div($containerPadding, 2));
			}
		}

		@media (max-width: $pc) {
			max-width: rem(970);
		}

		@media (max-width: $tablet) {
			max-width: rem(750);
		}

		@media (max-width: $mobile) {
			max-width: none;

			@if ($containerPadding>0 and $maxWidthContainer>0) {
				padding: 0 rem(math.div($containerPadding, 2));
			}
		}
	}
}

// ОбНУЛЕНИЕ ========================================================================================================================================================
* {
	padding: 0px;
	margin: 0px;
	border: 0px;
}

*,
*:before,
*:after {
	box-sizing: border-box;
}

:focus,
:active {
	outline: none;
}

a:focus,
a:active {
	outline: none;
}

html,
body {
	height: 100%;
	min-width: $minWidth + px;
}

body {
	background: #E8ECF1;
	color: $mainColor;
	line-height: 1;
	font-family: $fontFamily;
	font-size: $fontSize;
	//text-rendering: optimizeLegibility;
	-ms-text-size-adjust: 100%;
	-moz-text-size-adjust: 100%;
	-webkit-text-size-adjust: 100%;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

input,
button,
textarea {
	font-family: $fontFamily;
	font-size: inherit;
}

button {
	cursor: pointer;
	color: inherit;
	background-color: inherit;
}

a {
	color: inherit;
}

a:link,
a:visited {
	text-decoration: none;
}

a:hover {
	text-decoration: none;
}

ul li {
	list-style: none;
}

img {
	vertical-align: top;
}

h1,
h2,
h3,
h4,
h5,
h6 {
	font-weight: inherit;
	font-size: inherit;
}

.button {
	display: inline-flex;
	padding: 0px 0px;
}

.checkbox {
	position: relative;

	&:not(:last-child) {
		margin-bottom: em(5);
	}

	// // .checkbox__input
	&__input {
		position: absolute;
		width: 0;
		height: 0;
		opacity: 0;

		&:focus+.checkbox__label:before {
			// box-shadow: 0 0 5px #fff;
		}

		&:checked+.checkbox__label:before {
			background: #fff;
			flex-direction: row-reverse;
		}
	}

	// .checkbox__label
	&__label {
		cursor: pointer;
		display: inline-flex;
		align-items: center;
		position: relative;
		gap: 10px;

		&:before {
			content: "";
			align-self: flex-start;
			flex: 0 0 20px;
			width: 20px;
			height: 20px;
			// border: 1px solid #a7a9ac;
		}
	}

	// .checkbox__text
	&__text {}
}

input[type="text"],
input[type="email"],
input[type="tel"],
textarea {
	-webkit-appearance: none;
	-moz-appearance: none;
	appearance: none;
}

.input {
	border-radius: 0 !important;
	width: 100%;
	display: block;
	padding: 0px 20px;
	border: 1px solid #eee;
	font-weight: 400;
	font-size: 14px;
	line-height: 14px;


	&._form-focus {}

	&._form-error {}

	&::placeholder {
		font-weight: 400;
		font-size: rem(12);
		line-height: math.div(14, 12);
		color: #003B46;
	}
}

textarea.input {
	resize: none;
	padding: 15px 20px;
}

//========================================================================================================================================================




//========================================================================================================================================================


.payment {
	max-width: 530px;

	// @media (max-width:$mobile) {
	// 	width: rem(375);
	// }

	// .payment__wrapper
	&__wrapper {}

	// .payment__header
	&__header {
		display: flex;
		align-items: center;
		gap: rem(13);
		font-size: rem(16);
		font-weight: 500;
		line-height: math.div(16, 16);
		text-transform: uppercase;
		padding: 21px 0px 21px 18px;
		border-radius: 13px 13px 0px 0px;
		background: #E8ECF1;

		@media (max-width:$mobileSmall) {
			display: none;
		}

		&::before {
			content: '';
			width: 20px;
			height: 20px;
			background: url('/img/arrow.png') 0 0 no-repeat;


		}
	}

	// .payment__body
	&__body {
		padding: 30px 0px 20px 0px;
		border-radius: 0px 0px 13px 13px;
		background: #FFF;

		@media (max-width:$mobile) {
			border-radius: 15px;
			background: #FFF;
		}
	}

	// .payment__footer
	&__footer {}
}

.body-payment {
	@include adaptiveValue("padding-right", 95, 20);
	@include adaptiveValue("padding-left", 95, 20);
	display: flex;
	flex-direction: column;
	gap: rem(20);



	// .body-payment__title
	&__title {
		font-size: rem(14);
		font-weight: 500;
		line-height: 120%;
		text-transform: uppercase;
		color: #9EA7B2;

		span {
			color: #000;
		}
	}

	// .body-payment__checkbox
	&__checkbox {
		.checkbox__input {
			&:focus+.checkbox__label:before {
				align-self: flex-end;
			}

			&:checked+.checkbox__label:before {
				background: #fff;
				transform: translate(12px, 0px);
			}
		}

		.checkbox__label {
			cursor: pointer;
			display: inline-flex;
			align-items: center;
			position: relative;
			gap: 30px;
			padding: 4px 4px;
			width: 36px;
			height: 24px;
			background-color: #094B95;
			border-radius: 12px;


			&::before {
				content: '';
				transition: all 0.3s ease 0s;
				align-self: flex-start;
				width: 16px;
				height: 16px;
				border-radius: 50%;
				flex: 0 0 16px;
				background-color: #fff;

			}
		}

		.checkbox__text {
			font-size: rem(14);
			font-weight: 500;
			line-height: 120%;
			text-transform: uppercase;
			white-space: nowrap;
		}
	}
}

.form-payment {
	display: flex;
	flex-direction: column;
	gap: rem(40);

	// .form-payment__wrapper
	&__wrapper {
		display: flex;
		flex-direction: column;
		gap: rem(15);
	}

	// .form-payment__card
	&__card {}

	&__label {
		position: absolute;
		width: 100%;
		height: 100%;
		top: 7px;
		left: 20px;
		font-size: 12px;
		font-weight: 600;
		line-height: 120%;
		text-transform: uppercase;
		color: #9EA7B2;
		opacity: 0;
		transition: all 0.3s ease 0s;
	}

	// .form-payment__input
	&__input {
		height: rem(56);
		width: 100%;
		font-size: rem(16);
		font-weight: 500;
		line-height: 120%;


		&::placeholder {
			font-weight: 500;
			line-height: 120%;
			letter-spacing: 0.8px;
			text-transform: uppercase;
			color: #CBD4DF;
		}

		&:focus,
		&:valid+.form-payment__label {
			opacity: 1;

		}


	}





	// .form-payment__input-number
	&__input-number {
		border: none;
		// flex: 0 1 88.232%;
	}

	// .form-payment__group
	&__group {
		display: flex;
		position: relative;
	}

	// .form-payment__item
	&__item {
		position: relative;
		// height: 56px;
		border: 2px solid #CBD4DF;
	}

	&__item-error {
		// height: 56px;
		border: 2px solid #FA0000;
		position: relative;


	}


	&__item-number {
		display: flex;
		border: 2px solid #CBD4DF;
		border-bottom: none;
		align-items: center;
	}

	.form-paymen__type {
		padding: 0px 0px 0px 20px;

	}

	&__item-date {
		flex: 0 1 69.117%;
	}

	&__item-cvv {
		flex: 0 1 30.882%;

		border-left: none;
	}

	&__item-name {
		border: none;
	}

	// .form-payment__input-date
	&__input-date {
		flex: 0 1 69.117%;


	}

	// // .form-payment__input-cvv
	&__input-cvv {
		flex: 0 1 30.882%;
		border-left: none;
	}

	// .form-payment__error
	&__error {
		font-size: rem(12);
		font-weight: 500;
		line-height: 120%;
		color: #FA0000;
		margin-top: rem(5);
		margin-left: rem(20);
		display: flex;
		flex-direction: column;
		gap: 3px;



	}

	// .form-payment__input-name
	&__input-name {
		border: 2px solid #CBD4DF;
	}

	// .form-payment__button
	&__button {
		cursor: pointer;
		font-size: rem(18);
		font-weight: 600;
		line-height: 120%;
		text-transform: uppercase;
		border-radius: 44px;
		background: var(--colors-gradient-green-87-bc-1788-c-504, linear-gradient(0deg, #87BB18 0%, #88C504 100%));
		color: #fff;
		padding-top: 17px;
		padding-bottom: 17px;
		@include adaptiveValue("padding-right", 91, 61);
		@include adaptiveValue("padding-left", 91, 61);
		align-self: center;
		text-align: center;
		white-space: nowrap;
		box-shadow: 0px 10px 30px 0px rgba(135, 187, 24, 0.40);
		transition: all 0.3s ease 0s;

		@media (any-hover: hover) {
			&:hover {
				background: linear-gradient(0deg, #92C91D 0%, #9ADA0F 100%);
				box-shadow: 0px 20px 30px 0px rgba(135, 187, 24, 0.40);
			}
		}

		&:active {
			background: linear-gradient(0deg, #87BB18 0%, #88C504 100%)
		}


	}
}

.form-paymen {

	// .form-paymen__type
	&__type {}
}

.input {}

.checkbox {

	// .checkbox__input
	&__input {}

	// .checkbox__label
	&__label {}

	// .checkbox__text
	&__text {}
}

.footer-payment {
	padding: 20px 0px 20px 0px;
	background-color: #fff;

	@media (max-width:$mobile) {
		background: #E8ECF1;
	}

	// .footer-payment__providers
	&__providers {
		display: flex;
		align-items: center;
		justify-content: center;
		gap: rem(20);
	}

	// .footer-payment__image
	&__image {}
}